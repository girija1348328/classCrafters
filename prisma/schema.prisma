generator client {

  provider = "prisma-client-js"

}



datasource db {

  provider = "postgresql"

  url      = env("DATABASE_URL")

}



model Role {

  id          Int      @id @default(autoincrement())

  name        String

  description String?

  users       User[]

}



model User {

  id            Int       @id @default(autoincrement())

  name          String

  email         String    @unique

  password_hash String

  role_id       Int

  role          Role      @relation(fields: [role_id], references: [id])

  studentRegs   StudentRegistration[]

  staffRegs     StaffRegistration[]

  // Add these reverse relations

  classrooms    Classroom[]

  classroomStudents ClassroomStudent[]

  submissions   Submission[]

  assignedFeeAssignments FeeAssignment[] @relation("AssignedByUser")

  receivedPayments       FeePayment[]     @relation("ReceivedByUser")

  created_at    DateTime  @default(now())

  updated_at    DateTime  @updatedAt

}



model EducationType {

  id            Int           @id @default(autoincrement())

  name          String

  institutions  Institution[]

}



model Location {

  id            Int           @id @default(autoincrement())

  name          String

  address       String?

  city          String?

  state         String?

  country       String?

  zipcode       String?

  institutions  Institution[]

}



model Institution {

  id                 Int                 @id @default(autoincrement())

  name               String

  education_type_id  Int

  location_id        Int

  educationType      EducationType       @relation(fields: [education_type_id], references: [id])

  location           Location            @relation(fields: [location_id], references: [id])

  studentRegs        StudentRegistration[]

  staffRegs          StaffRegistration[]

  feeHeads           FeeHead[]
  
  feeStructures      FeeStructure[]

  created_at         DateTime @default(now())

  updated_at         DateTime @updatedAt

   

}



model Phase {

  id               Int                   @id @default(autoincrement())

  name             String

  description      String?

  studentRegs      StudentRegistration[]

feeStructures FeeStructure[]

}



model MainGroup {

  id               Int                   @id @default(autoincrement())

  name             String

  description      String?

  subGroups        SubGroup[]

}



model SubGroup {

  id               Int                   @id @default(autoincrement())

  name             String

  main_group_id    Int

  mainGroup        MainGroup              @relation(fields: [main_group_id], references: [id])

  studentRegs      StudentRegistration[]

  feeStructures FeeStructure[]

}



model CustomField {

  id          Int      @id @default(autoincrement())

  name        String

  entity_type String   // "student_registration" or "staff_registration"

  field_type  String   // text, number, date, dropdown

  options     Json?

}



model StudentRegistration {

  id            Int       @id @default(autoincrement())

  user_id       Int

  institution_id Int

  phase_id      Int

  subgroup_id   Int

  custom_data   Json?

  user          User      @relation(fields: [user_id], references: [id])

  institution   Institution @relation(fields: [institution_id], references: [id])

  phase         Phase     @relation(fields: [phase_id], references: [id])

  subgroup      SubGroup  @relation(fields: [subgroup_id], references: [id])
 
  feeAssignments FeeAssignment[]

  feePayments    FeePayment[]

  created_at    DateTime  @default(now())

}



model StaffRegistration {

  id              Int       @id @default(autoincrement())

  user_id         Int

  institution_id  Int

  role_in_institution String?

  custom_data     Json?

  user            User       @relation(fields: [user_id], references: [id])

  institution     Institution @relation(fields: [institution_id], references: [id])

  created_at      DateTime   @default(now())

}



model Classroom {

  id          Int        @id @default(autoincrement())

  name        String

  subject     String?

  description String?

  teacherId   Int  // Changed from String to Int to match User.id

  teacher     User          @relation(fields: [teacherId], references: [id])

  students    ClassroomStudent[]

  assignments Assignment[]

  createdAt   DateTime      @default(now())

  updatedAt   DateTime      @updatedAt

}



model ClassroomStudent {

  id          Int    @id @default(autoincrement())  // Changed from String to Int

  classroom   Classroom @relation(fields: [classroomId], references: [id])

  classroomId Int  // Changed from String to Int to match Classroom.id

  student     User      @relation(fields: [studentId], references: [id])

  studentId   Int  // Changed from String to Int to match User.id

}



model Assignment {

  id          Int    @id @default(autoincrement())  // Changed from String to Int

  title       String

  description String?

  dueDate     DateTime

  classroom   Classroom @relation(fields: [classroomId], references: [id])

  classroomId Int  // Changed from String to Int to match Classroom.id

  createdBy   String

  submissions Submission[]

  createdAt   DateTime  @default(now())

  updatedAt   DateTime  @updatedAt

}



model Submission {

  id           Int     @id @default(autoincrement())  // Changed from String to Int

  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  assignmentId Int  // Changed from String to Int to match Assignment.id

  student      User       @relation(fields: [studentId], references: [id])

  studentId    Int  // Changed from String to Int to match User.id

  fileUrl      String

  submittedAt  DateTime   @default(now())

  grade        String?

}

enum FineType {
  FIXED
  PERCENTAGE
}

enum DiscountType {
  FIXED
  PERCENTAGE
}

enum InstallmentType {
  MONTHLY
  TERM
  CUSTOM
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  CANCELLED
  FAILED
}

enum PaymentMode {
  CASH
  BANK
  ONLINE
  CHEQUE
  UPI
}

enum LedgerEntryType {
  CHARGE      // initial assignment/charge
  PAYMENT     // payment received
  DISCOUNT    // discount or scholarship applied
  FINE        // late fee applied
  ADJUSTMENT  // manual adjustments/refunds
}

model FeeHead {
  id             Int         @id @default(autoincrement())
  institution_id Int
  institution    Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade)

  name           String
  code           String?     // short code e.g. TUITION, TRANSPORT
  description    String?
  is_mandatory   Boolean     @default(true)
  default_amount Decimal?    // recommended base value, optional
  currency       String?     @default("INR")

  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt 

  FeeStructureHead FeeStructureHead[]
  FeePaymentHead   FeePaymentHead[]
  FeeDiscounts    FeeDiscount[]
}

model FeeStructure {
  id              Int         @id @default(autoincrement())
  institution_id  Int
  institution     Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade)

  name            String
  code            String?      // optional identifier for admin
  description     String?
  phase_id        Int?         // optional: applies to a Phase
  phase           Phase?       @relation(fields: [phase_id], references: [id], onDelete: SetNull)
  subgroup_id     Int?         // optional: applies to a SubGroup override
  subgroup        SubGroup?    @relation(fields: [subgroup_id], references: [id], onDelete: SetNull)

  total_amount    Decimal?     // optional computed/summary amount
  currency        String?      @default("INR")
  is_active       Boolean      @default(true)

  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  heads           FeeStructureHead[]
  installments    FeeInstallment[]
  discounts       FeeDiscount[]
  fine_rules      FeeFineRule[]
  assignments     FeeAssignment[]

  @@index([institution_id])
  @@index([phase_id])
  @@index([subgroup_id])
}

model FeeStructureHead {
  id               Int          @id @default(autoincrement())
  fee_structure_id Int
  fee_structure    FeeStructure @relation(fields: [fee_structure_id], references: [id], onDelete: Cascade)

  fee_head_id      Int
  fee_head         FeeHead      @relation(fields: [fee_head_id], references: [id], onDelete: Cascade)

  amount           Decimal
  is_optional      Boolean      @default(false) // optional heads e.g. transport
  notes            String?

  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt

  @@index([fee_structure_id])
  @@index([fee_head_id])
}

model FeeInstallment {
  id               Int          @id @default(autoincrement())
  fee_structure_id Int
  fee_structure    FeeStructure @relation(fields: [fee_structure_id], references: [id], onDelete: Cascade)

  installment_no   Int          // e.g., 1,2,3...
  installment_type InstallmentType
  due_date         DateTime
  amount           Decimal
  description      String?

  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt

  @@index([fee_structure_id])
}

model FeeDiscount {
  id               Int          @id @default(autoincrement())
  fee_structure_id Int
  fee_structure    FeeStructure @relation(fields: [fee_structure_id], references: [id], onDelete: Cascade)

  name             String
  description      String?
  discount_type    DiscountType
  amount           Decimal      // either fixed amount or percentage (interpreted by discount_type)
  applies_to_head_id Int?       // nullable: if set, applies to specific FeeHead
  applies_to_head  FeeHead?     @relation(fields: [applies_to_head_id], references: [id], onDelete: SetNull)

  eligibility_criteria Json?    // free-form JSON (e.g., {"sibling": true, "category": "SC"})
  valid_from       DateTime?
  valid_until      DateTime?

  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt

}

model FeeFineRule {
  id               Int          @id @default(autoincrement())
  fee_structure_id Int
  fee_structure    FeeStructure @relation(fields: [fee_structure_id], references: [id], onDelete: Cascade)

  name             String?
  description      String?
  fine_type        FineType     // FIXED or PERCENTAGE
  value            Decimal      // amount or percentage-per-day (interpretation depends on fine_type)
  grace_period_days Int         @default(0) // no fine within grace period
  max_cap          Decimal?     // optional maximum cap for fines
  apply_after_days Int?         // optional: start applying after N days

  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt

  @@index([fee_structure_id])
}

model FeeAssignment {
  id                     Int                  @id @default(autoincrement())
  student_registration_id Int
  student_registration   StudentRegistration  @relation(fields: [student_registration_id], references: [id], onDelete: Cascade)

  fee_structure_id       Int
  fee_structure          FeeStructure         @relation(fields: [fee_structure_id], references: [id], onDelete: SetNull)

  assigned_on            DateTime             @default(now())
  assigned_by_id         Int?
  assigned_by            User?                @relation("AssignedByUser", fields: [assigned_by_id], references: [id], onDelete: SetNull)

  total_amount           Decimal
  due_amount             Decimal
  outstanding_amount     Decimal
  currency               String?              @default("INR")

  status                 PaymentStatus        @default(PENDING)
  due_date               DateTime?

  payments               FeePayment[]
  ledger_entries         FeeLedger[]

  created_at             DateTime             @default(now())
  updated_at             DateTime             @updatedAt

  @@index([student_registration_id])
  @@index([fee_structure_id])
}


model FeePayment {
  id                    Int           @id @default(autoincrement())
  fee_assignment_id     Int
  fee_assignment        FeeAssignment @relation(fields: [fee_assignment_id], references: [id], onDelete: Cascade)

  student_registration_id Int
  student_registration  StudentRegistration @relation(fields: [student_registration_id], references: [id], onDelete: Cascade)

  payment_date          DateTime      @default(now())
  amount                Decimal
  payment_mode          PaymentMode
  status                PaymentStatus @default(PENDING)
  transaction_ref       String?       // gateway/transaction id
  received_by_id        Int?          // user id who recorded/received payment
  received_by           User? @relation("ReceivedByUser", fields: [received_by_id], references: [id], onDelete: SetNull)
  note                  String?

  payment_heads         FeePaymentHead[]

  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt

  @@index([fee_assignment_id])
  @@index([student_registration_id])
}

model FeePaymentHead {
  id               Int       @id @default(autoincrement())
  fee_payment_id   Int
  fee_payment      FeePayment @relation(fields: [fee_payment_id], references: [id], onDelete: Cascade)

  fee_head_id      Int
  fee_head         FeeHead    @relation(fields: [fee_head_id], references: [id], onDelete: SetNull)

  amount           Decimal

  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  @@index([fee_payment_id])
  @@index([fee_head_id])
}

model FeeLedger {
  id                  Int           @id @default(autoincrement())
  fee_assignment_id   Int
  fee_assignment      FeeAssignment @relation(fields: [fee_assignment_id], references: [id], onDelete: Cascade)

  entry_type          LedgerEntryType
  amount              Decimal
  balance_after       Decimal?      // optional snapshot of outstanding after this entry
  note                String?
  created_at          DateTime      @default(now())

  @@index([fee_assignment_id])
}
